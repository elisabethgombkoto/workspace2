package hue06.task1.GarphErzeugen;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;



public class Graph<T>
{
	
	protected enum AdjacencyStructureType {
		MATRIX, LIST
	}
	
	private AdjacencyStructure<T> _adjStructur=null;
	
	private Graph(int numOfVertices, AdjacencyStructureType adjType) {
		switch (adjType) {
		case MATRIX:
			_adjStructur = new AdjacencyMatrix<T>(numOfVertices);
			break;
		case LIST:
			_adjStructur = new AdjacencyList<T>(numOfVertices);
			break;
		default:
			break;
		}
		
		
	}
	public  Graph<T> createGraph( File file, AdjacencyStructureType adjTyp) throws IOException{
		if (!file.exists()){
			throw new FileNotFoundException();
		}
		//if(!AdjacencyStructureType.valueOf(adjTyp){
		//	throw new IllegalArgumentException();
		//}
		
		FileUtil fileUtil= new FileUtil(file);
		BufferedReader br = new BufferedReader(new FileReader(file));
		String line = "";
		
		line = br.readLine();	// read vertex line 
		java.lang.Integer[] iVertices;
		String[] sVertices = line.substring(line.indexOf('{')+1, line.lastIndexOf('}')).split(",");
		iVertices = fileUtil.stringToIntegerArray(sVertices);
		
		ArrayList<Vertex<Integer>> vertecies= new ArrayList<>();
		for(int i=0; i<iVertices.length;i++){
			vertecies.add(i, new Vertex<Integer>(iVertices[i]));
		}
		Graph<Integer> graph = new Graph<Integer>(iVertices.length+1, adjTyp);
		
		line = br.readLine();	// read edge line
		String[] sEdges = line.substring(line.indexOf('{')+2, line.lastIndexOf('}')-1).split("\\],\\[");
		
		ArrayList<java.lang.Integer> iEdge;
		for(String e : sEdges) {
			iEdge = fileUtil.stringToIntegerArrayList(e.split(","));
			graph.addEdge(iEdge.get(0), iEdge.get(1), iEdge.get(3));
		}
		
		br.close();
		return graph;
		
		
	}
	

private void addEdge(java.lang.Integer integer, java.lang.Integer integer2, java.lang.Integer integer3) {
		_adjStructur.addEdge(integer, integer2, integer3 );
		
	}
//string tookeneiser, 
//string splitten
//es kann graph geben nur mit knoten aber ungewichteten kannten


//addEdge() -> welche zugriff modifikator

//gib ich alles von der datei einzeln mit oder vortlaufend

//classe Edge classe Vertiges

//deprecated


public void print(){
	
}
public char[] hasEulerPath() {
	// TODO Auto-generated method stub
	return null;
}
public char[] hasEulerCircle() {
	// TODO Auto-generated method stub
	return null;
}

}
