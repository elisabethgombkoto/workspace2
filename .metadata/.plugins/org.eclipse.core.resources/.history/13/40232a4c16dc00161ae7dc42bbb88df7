/**
 * 
 */
package hue10.puzzel8;

import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;

import hue10.puzzel8.Puzzel8.Hole;

/**
 * @author ElisabethElisabeth Gombkötö
 *14.01.2017WS_2016
 */
public class H2 extends PuzzelSolver{

	/* (non-Javadoc)
	 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
	 */
	@Override
	public int compare(Puzzel8 p1, Puzzel8 p2) {
		int[][] endP1=p1.get_end();
		int[] soll;
		int[] ist;
		int totalerrorP1=0;
		int totalerrorP2=0;
		for(int i=0; i<9;i++){
			soll=p1.getCoordinate(endP1, i);
			ist=p1.getCoordinate(p1.get_gamefield(), i);
			totalerrorP1+= Math.abs(soll[0]-ist[0]);
			totalerrorP1+= Math.abs(soll[1]-ist[1]);
		}
		for(int i=0; i<9;i++){
			soll=p1.getCoordinate(endP1, i);
			ist=p2.getCoordinate(p2.get_gamefield(), i);
			totalerrorP2+= Math.abs(soll[0]-ist[0]);
			totalerrorP2+= Math.abs(soll[1]-ist[1]);
		}
		if(totalerrorP1<totalerrorP2){
			return -1;
		}
		if(totalerrorP1> totalerrorP2){
			return 1;
		}
		return 0;
}

	/* (non-Javadoc)
	 * @see hue10.puzzel8.PuzzelSolver#getNextState(hue10.puzzel8.Puzzel8)
	 */
	@Override
	protected Queue<Puzzel8> getNextState(Puzzel8 state) {
		Queue<Puzzel8> openList= new PriorityQueue<Puzzel8>(this);
		List<Puzzel8> children = new LinkedList<Puzzel8>();		
		children=state.createPuzzel8State(state);
		
		for(Puzzel8 child : children){
			openList.add(child);
	}
		return openList;

		
	}

	
}
